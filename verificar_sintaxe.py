#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste de sintaxe para verificar se o main.py est√° correto
"""

import ast
import sys

def verificar_sintaxe_main():
    """Verifica se o arquivo main.py tem sintaxe v√°lida"""
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            codigo = f.read()
        
        # Verificar sintaxe Python
        ast.parse(codigo)
        print("‚úÖ SINTAXE PYTHON: OK")
        
        # Verificar se n√£o h√° refer√™ncias a 'abrir_chamado'
        if 'abrir_chamado' in codigo:
            print("‚ùå ERRO: Ainda h√° refer√™ncias a 'abrir_chamado'")
            linhas = codigo.split('\n')
            for i, linha in enumerate(linhas, 1):
                if 'abrir_chamado' in linha:
                    print(f"   Linha {i}: {linha.strip()}")
            return False
        else:
            print("‚úÖ REFER√äNCIAS 'abrir_chamado': Removidas")
        
        # Verificar se workflow est√° correto
        if 'workflow.add_edge("abrir_chamado"' in codigo:
            print("‚ùå ERRO: Ainda h√° edge para 'abrir_chamado'")
            return False
        else:
            print("‚úÖ WORKFLOW EDGES: OK")
        
        # Verificar se apenas AUTO_RESOLVER e PEDIR_INFO est√£o nas decis√µes
        if '"ABRIR_CHAMADO"' in codigo:
            print("‚ö†Ô∏è AVISO: Ainda h√° refer√™ncias a 'ABRIR_CHAMADO' no c√≥digo")
            print("   (Pode ser em coment√°rios ou strings)")
        
        print("‚úÖ VERIFICA√á√ÉO GERAL: SUCESSO")
        return True
        
    except SyntaxError as e:
        print(f"‚ùå ERRO DE SINTAXE: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå ERRO: Arquivo main.py n√£o encontrado")
        return False
    except Exception as e:
        print(f"‚ùå ERRO INESPERADO: {e}")
        return False

def verificar_imports():
    """Verifica se os imports est√£o corretos"""
    print("\nüì¶ VERIFICANDO IMPORTS...")
    
    try:
        with open('main.py', 'r', encoding='utf-8') as f:
            linhas = f.readlines()
        
        imports_encontrados = []
        for i, linha in enumerate(linhas[:30], 1):  # Verificar apenas primeiras 30 linhas
            if linha.strip().startswith(('import ', 'from ')):
                imports_encontrados.append(f"Linha {i}: {linha.strip()}")
        
        print("Imports encontrados:")
        for imp in imports_encontrados:
            print(f"  {imp}")
        
        return True
    except Exception as e:
        print(f"‚ùå ERRO ao verificar imports: {e}")
        return False

if __name__ == "__main__":
    print("üîç VERIFICA√á√ÉO DE SINTAXE E ESTRUTURA")
    print("=" * 50)
    
    sucesso_sintaxe = verificar_sintaxe_main()
    sucesso_imports = verificar_imports()
    
    print("\n" + "=" * 50)
    if sucesso_sintaxe and sucesso_imports:
        print("üéâ VERIFICA√á√ÉO COMPLETA: SUCESSO!")
        print("‚úÖ O arquivo main.py est√° pronto para uso")
        print("‚úÖ N√£o h√° mais refer√™ncias a 'abrir_chamado'")
    else:
        print("‚ùå VERIFICA√á√ÉO FALHOU!")
        print("‚ö†Ô∏è Corrija os problemas acima")