"""
Teste r√°pido do sistema de Batch Processing
"""

import sys
import os

# Adicionar diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from batch_processor import BatchProcessor, BatchItem

def teste_rapido():
    """Teste r√°pido com 10 perguntas"""
    
    print("üß™ Teste R√°pido do Batch Processing")
    print("=" * 40)
    
    # Perguntas de teste
    perguntas = [
        "O que √© a procedure SP_AT_INT_APLICINSUMOAGRIC?",
        "Como funciona a normaliza√ß√£o de dados?", 
        "Qual √© a origem dos dados?",
        "Explique o processo ETL",
        "O que s√£o regras de neg√≥cio?",
        "Como consultar tabelas?",
        "Explique integra√ß√£o de sistemas",
        "O que √© consolida√ß√£o de dados?",
        "Como funciona o SmartBreeder?",
        "Explique procedures SQL"
    ]
    
    # Criar processador
    processor = BatchProcessor(
        batch_size=3,
        max_workers=2,
        rate_limit=2.0,
        enable_caching=True
    )
    
    # Criar itens
    items = [
        BatchItem(id=f"teste_{i+1}", content=pergunta, metadata={})
        for i, pergunta in enumerate(perguntas)
    ]
    
    print(f"üìù Processando {len(items)} perguntas...")
    
    # Processar
    results = processor.process_batch(items)
    
    # Mostrar resultados
    print(f"\nüìä Resultados:")
    summary = processor.get_processing_summary()
    for key, value in summary.items():
        print(f"   {key}: {value}")
    
    # Mostrar amostra
    print(f"\nüìã Amostra (primeiros 3):")
    for result in results[:3]:
        status = "‚úÖ" if result.success else "‚ùå"
        print(f"{status} {result.item_id}: {result.processing_time:.2f}s")
        
        if result.success and result.result:
            resposta = result.result.get('resposta', 'N/A')
            print(f"   {resposta[:80]}...")
        elif result.error:
            print(f"   Erro: {result.error}")
        print()
    
    return results

if __name__ == "__main__":
    try:
        results = teste_rapido()
        print("‚úÖ Teste conclu√≠do com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        import traceback
        traceback.print_exc()